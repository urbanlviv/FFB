import telebot
from config import TOKEN, whitelist, permission_denied_message, GOOGLE_SHEETS_CREDS_FILE, SPREADSHEET_ID
from telebot import types
import schedule
import threading
import logging
import time

bot = telebot.TeleBot(TOKEN)

users_notifications = {}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_custom_keyboard():
    logger.info("Creating custom keyboard")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–í–∏—Ç—Ä–∞—Ç–∏")
    button2 = types.KeyboardButton("–î–æ—Ö—ñ–¥")
    button3 = types.KeyboardButton("–ë—é–¥–∂–µ—Ç")
    button4 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    button5 = types.KeyboardButton("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    button6 = types.KeyboardButton("/restart")
    keyboard.add(button1, button2, button3, button4, button5, button6)
    return keyboard

def send_menu_with_keyboard(chat_id):
    logger.info(f"Sending menu to chat_id {chat_id}")
    keyboard = create_custom_keyboard()
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def start(message):
    logger.info("Received /start command")
    if message.from_user.id in whitelist:
        send_menu_with_keyboard(message.chat.id)
    else:
        bot.send_message(message.chat.id, permission_denied_message)

@bot.message_handler(commands=['restart'])
def restart(message):
    logger.info("Received /restart command")
    if message.from_user.id in whitelist:
        users_notifications.clear()
        send_menu_with_keyboard(message.chat.id)
    else:
        bot.send_message(message.chat.id, permission_denied_message)

# –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É whitelist –¥–æ —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥

@bot.message_handler(func=lambda message: message.text == "–í–∏—Ç—Ä–∞—Ç–∏")
def handle_expenses(message):
    logger.info("Handling expenses")
    if message.from_user.id in whitelist:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –≤–∏—Ç—Ä–∞—Ç–∏:")
    else:
        bot.send_message(message.chat.id, permission_denied_message)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
def handle_settings(message):
    logger.info("Handling settings")
    if message.from_user.id in whitelist:
        chat_id = message.chat.id
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ '–≥–æ–¥–∏–Ω–∞:—Ö–≤–∏–ª–∏–Ω–∞' (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20:24):")
        bot.register_next_step_handler(message, set_notification_time)
    else:
        bot.send_message(message.chat.id, permission_denied_message)

@bot.message_handler(func=lambda message: message.text == "–î–æ—Ö—ñ–¥")
def handle_income(message):
    logger.info("Handling income")
    if message.from_user.id in whitelist:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –¥–æ—Ö–æ–¥—É:")
    else:
        bot.send_message(message.chat.id, permission_denied_message)

@bot.message_handler(func=lambda message: message.text == "–ë—é–¥–∂–µ—Ç")
def handle_budget(message):
    logger.info("Handling budget")
    if message.from_user.id in whitelist:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç:")
    else:
        bot.send_message(message.chat.id, permission_denied_message)

def set_notification_time(message):
    logger.info("Setting notification time")
    chat_id = message.chat.id
    if message.from_user.id in whitelist:
        time_str = message.text.strip()
        try:
            hour, minute = map(int, time_str.split(':'))
            users_notifications[chat_id] = (hour, minute)
            bot.send_message(chat_id, f"–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {hour:02d}:{minute:02d}")
            schedule_notification(hour, minute, chat_id)
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ '–≥–æ–¥–∏–Ω–∞:—Ö–≤–∏–ª–∏–Ω–∞'.")
    else:
        bot.send_message(message.chat.id, permission_denied_message)

def schedule_notification(hour, minute, chat_id):
    logger.info(f"Scheduling notification for chat_id {chat_id} at {hour:02d}:{minute:02d}")
    scheduled_time = f"{hour:02d}:{minute:02d}"
    schedule.every().day.at(scheduled_time).do(send_notification, chat_id)

def send_notification(chat_id):
    logger.info(f"Sending notification to chat_id {chat_id}")
    try:
        bot.send_message(chat_id, "–•–µ–π! üëã\n–Ø —Ç—É—Ç, —â–æ–± –Ω–∞–≥–∞—Ç–¥–∞—Ç–∏ —Ç–æ–±—ñ –≤–∫–∞–∑–∞—Ç–∏ —Ç–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏)")
    except Exception as e:
        logger.error(f"Error sending notification to chat_id {chat_id}: {e}")

def polling_thread():
    bot.polling(none_stop=True)

if __name__ == "__main__":
    polling_thread = threading.Thread(target=polling_thread)
    polling_thread.start()

    while True:
        schedule.run_pending()
        time.sleep(1)
